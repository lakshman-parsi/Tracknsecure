# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jVo2NL-sZ6IG29On2_l5HpYraggDFwlQ
"""

import pickle
import pandas as pd
from sklearn.preprocessing import StandardScaler

# Load the scaler and kmeans objects
with open('scaler_kmeans.pkl', 'rb') as file:
    loaded_objects = pickle.load(file)

scaler = loaded_objects['scaler']
kmeans = loaded_objects['kmeans']

# Example new data to predict
new_data = pd.DataFrame({
    "Vict Age": [35, 35, 35],
    "LAT": [34.1016, 33.9500, 34.2000],
    "LON": [-118.3300, -118.2700, -118.4000]
})

# Normalize the new data
scaled_new_data = scaler.transform(new_data)

# Predict clusters for the new data
predicted_clusters = kmeans.predict(scaled_new_data)



# Display the new data with cluster predictions
print(predicted_clusters)

import json

# Load the JSON file
with open('/content/cluster.json', 'r') as file:
    risk_data = json.load(file)

# Given cluster to check


# Function to find the risk level for a given cluster
def find_risk_level(cluster, risk_data):
    for risk_level, clusters in risk_data.items():
        if cluster in clusters:
            return risk_level
    return "Cluster not found in any risk level."

# Find the risk level for the given cluster

result = []
for i in predicted_clusters:
  result.append(find_risk_level(i, risk_data))

# Display the result
# print(f"Cluster {given_cluster} belongs to: {result}")
result

